
C:\Users\IMRUL\AppData\Local\Temp\VMBuilds\event_group_3_tasks\uno\Release/event_group_3_tasks.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_18>
  4c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_19>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <port_to_output_PGM>:
  7c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000086 <port_to_mode_PGM>:
  86:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <digital_pin_to_bit_mask_PGM>:
  a4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  b4:	04 08 10 20                                         ... 

000000b8 <__ctors_start>:
__ctors_start():
  b8:	8e 03       	fmulsu	r16, r22

000000ba <__ctors_end>:
__dtors_end():
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  c6:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  c8:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  ca:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  cc:	e6 e8       	ldi	r30, 0x86	; 134
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  ce:	f7 e0       	ldi	r31, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  d2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  d4:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  d6:	a2 31       	cpi	r26, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  d8:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  dc:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  de:	a2 e1       	ldi	r26, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  e0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  e6:	a8 3b       	cpi	r26, 0xB8	; 184
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  e8:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  ec:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  ee:	cd e5       	ldi	r28, 0x5D	; 93
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
  f0:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
  f4:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
  f6:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
  f8:	0e 94 bb 03 	call	0x776	; 0x776 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
  fc:	cc 35       	cpi	r28, 0x5C	; 92
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
  fe:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <main>
 106:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

0000010a <__bad_interrupt>:
__vector_22():
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <pinMode.constprop.5>:
pinMode.constprop.5():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	ec 55       	subi	r30, 0x5C	; 92
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	24 91       	lpm	r18, Z
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:32
	uint8_t port = digitalPinToPort(pin);
 118:	80 57       	subi	r24, 0x70	; 112
 11a:	9f 4f       	sbci	r25, 0xFF	; 255
 11c:	fc 01       	movw	r30, r24
 11e:	84 91       	lpm	r24, Z
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:35
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 120:	88 23       	and	r24, r24
 122:	99 f0       	breq	.+38     	; 0x14a <pinMode.constprop.5+0x3c>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:38

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	fc 01       	movw	r30, r24
 12c:	ea 57       	subi	r30, 0x7A	; 122
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	a5 91       	lpm	r26, Z+
 132:	b4 91       	lpm	r27, Z
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:39
	out = portOutputRegister(port);
 134:	fc 01       	movw	r30, r24
 136:	e4 58       	subi	r30, 0x84	; 132
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	85 91       	lpm	r24, Z+
 13c:	94 91       	lpm	r25, Z
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:54
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 13e:	8f b7       	in	r24, 0x3f	; 63
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:55
                cli();
 140:	f8 94       	cli
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:56
		*reg |= bit;
 142:	ec 91       	ld	r30, X
 144:	e2 2b       	or	r30, r18
 146:	ec 93       	st	X, r30
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:57
		SREG = oldSREG;
 148:	8f bf       	out	0x3f, r24	; 63
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:59
	}
}
 14a:	08 95       	ret

0000014c <digitalWrite.constprop.3>:
digitalWrite.constprop.3():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:140
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 14c:	e0 e7       	ldi	r30, 0x70	; 112
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	24 91       	lpm	r18, Z
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
 152:	ec ea       	ldi	r30, 0xAC	; 172
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	94 91       	lpm	r25, Z
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
 158:	e8 e9       	ldi	r30, 0x98	; 152
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e4 91       	lpm	r30, Z
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:145
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 15e:	ee 23       	and	r30, r30
 160:	c9 f0       	breq	.+50     	; 0x194 <digitalWrite.constprop.3+0x48>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:149

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 162:	22 23       	and	r18, r18
 164:	39 f0       	breq	.+14     	; 0x174 <digitalWrite.constprop.3+0x28>
turnOffPWM():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 166:	23 30       	cpi	r18, 0x03	; 3
 168:	01 f1       	breq	.+64     	; 0x1aa <digitalWrite.constprop.3+0x5e>
 16a:	a8 f4       	brcc	.+42     	; 0x196 <digitalWrite.constprop.3+0x4a>
 16c:	21 30       	cpi	r18, 0x01	; 1
 16e:	19 f1       	breq	.+70     	; 0x1b6 <digitalWrite.constprop.3+0x6a>
 170:	22 30       	cpi	r18, 0x02	; 2
 172:	29 f1       	breq	.+74     	; 0x1be <digitalWrite.constprop.3+0x72>
digitalWrite.constprop.3():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:151

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e4 58       	subi	r30, 0x84	; 132
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	a5 91       	lpm	r26, Z+
 180:	b4 91       	lpm	r27, Z
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:153

	uint8_t oldSREG = SREG;
 182:	2f b7       	in	r18, 0x3f	; 63
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:154
	cli();
 184:	f8 94       	cli
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:157

	if (val == LOW) {
		*out &= ~bit;
 186:	ec 91       	ld	r30, X
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:156
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 188:	81 11       	cpse	r24, r1
 18a:	26 c0       	rjmp	.+76     	; 0x1d8 <digitalWrite.constprop.3+0x8c>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:157
		*out &= ~bit;
 18c:	90 95       	com	r25
 18e:	9e 23       	and	r25, r30
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:159
	} else {
		*out |= bit;
 190:	9c 93       	st	X, r25
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:162
	}

	SREG = oldSREG;
 192:	2f bf       	out	0x3f, r18	; 63
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:163
}
 194:	08 95       	ret
turnOffPWM():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 196:	27 30       	cpi	r18, 0x07	; 7
 198:	a9 f0       	breq	.+42     	; 0x1c4 <digitalWrite.constprop.3+0x78>
 19a:	28 30       	cpi	r18, 0x08	; 8
 19c:	c9 f0       	breq	.+50     	; 0x1d0 <digitalWrite.constprop.3+0x84>
 19e:	24 30       	cpi	r18, 0x04	; 4
 1a0:	49 f7       	brne	.-46     	; 0x174 <digitalWrite.constprop.3+0x28>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:83
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1a2:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 1a6:	2f 7d       	andi	r18, 0xDF	; 223
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <digitalWrite.constprop.3+0x64>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:80
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 1aa:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 1ae:	2f 77       	andi	r18, 0x7F	; 127
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:83
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 1b0:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 1b4:	df cf       	rjmp	.-66     	; 0x174 <digitalWrite.constprop.3+0x28>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:94
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 1b6:	24 b5       	in	r18, 0x24	; 36
 1b8:	2f 77       	andi	r18, 0x7F	; 127
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:98
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 1ba:	24 bd       	out	0x24, r18	; 36
 1bc:	db cf       	rjmp	.-74     	; 0x174 <digitalWrite.constprop.3+0x28>
 1be:	24 b5       	in	r18, 0x24	; 36
 1c0:	2f 7d       	andi	r18, 0xDF	; 223
 1c2:	fb cf       	rjmp	.-10     	; 0x1ba <digitalWrite.constprop.3+0x6e>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:101
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 1c4:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 1c8:	2f 77       	andi	r18, 0x7F	; 127
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1ca:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 1ce:	d2 cf       	rjmp	.-92     	; 0x174 <digitalWrite.constprop.3+0x28>
 1d0:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 1d4:	2f 7d       	andi	r18, 0xDF	; 223
 1d6:	f9 cf       	rjmp	.-14     	; 0x1ca <digitalWrite.constprop.3+0x7e>
digitalWrite.constprop.3():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring_digital.c:159
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 1d8:	9e 2b       	or	r25, r30
 1da:	da cf       	rjmp	.-76     	; 0x190 <digitalWrite.constprop.3+0x44>

000001dc <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 1dc:	af 92       	push	r10
 1de:	bf 92       	push	r11
 1e0:	cf 92       	push	r12
 1e2:	df 92       	push	r13
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	6c 01       	movw	r12, r24
 1f2:	7b 01       	movw	r14, r22
 1f4:	8b 01       	movw	r16, r22
 1f6:	04 0f       	add	r16, r20
 1f8:	15 1f       	adc	r17, r21
 1fa:	eb 01       	movw	r28, r22
 1fc:	5e 01       	movw	r10, r28
 1fe:	ae 18       	sub	r10, r14
 200:	bf 08       	sbc	r11, r15
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/Print.cpp:37
  size_t n = 0;
  while (size--) {
 202:	c0 17       	cp	r28, r16
 204:	d1 07       	cpc	r29, r17
 206:	59 f0       	breq	.+22     	; 0x21e <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/Print.cpp:38
    if (write(*buffer++)) n++;
 208:	69 91       	ld	r22, Y+
 20a:	d6 01       	movw	r26, r12
 20c:	ed 91       	ld	r30, X+
 20e:	fc 91       	ld	r31, X
 210:	01 90       	ld	r0, Z+
 212:	f0 81       	ld	r31, Z
 214:	e0 2d       	mov	r30, r0
 216:	c6 01       	movw	r24, r12
 218:	09 95       	icall
 21a:	89 2b       	or	r24, r25
 21c:	79 f7       	brne	.-34     	; 0x1fc <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/Print.cpp:42
    else break;
  }
  return n;
}
 21e:	c5 01       	movw	r24, r10
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	bf 90       	pop	r11
 232:	af 90       	pop	r10
 234:	08 95       	ret

00000236 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:198
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 236:	fc 01       	movw	r30, r24
 238:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:199
    tail = _tx_buffer_tail;
 23a:	44 8d       	ldd	r20, Z+28	; 0x1c
 23c:	25 2f       	mov	r18, r21
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	84 2f       	mov	r24, r20
 242:	90 e0       	ldi	r25, 0x00	; 0
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:201
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 244:	82 1b       	sub	r24, r18
 246:	93 0b       	sbc	r25, r19
 248:	54 17       	cp	r21, r20
 24a:	10 f0       	brcs	.+4      	; 0x250 <HardwareSerial::availableForWrite()+0x1a>
 24c:	cf 96       	adiw	r24, 0x3f	; 63
 24e:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:202
  return tail - head - 1;
 250:	01 97       	sbiw	r24, 0x01	; 1
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:203
}
 252:	08 95       	ret

00000254 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:181
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
 254:	fc 01       	movw	r30, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:183
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 256:	91 8d       	ldd	r25, Z+25	; 0x19
 258:	82 8d       	ldd	r24, Z+26	; 0x1a
 25a:	98 17       	cp	r25, r24
 25c:	61 f0       	breq	.+24     	; 0x276 <HardwareSerial::read()+0x22>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:186
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 25e:	a2 8d       	ldd	r26, Z+26	; 0x1a
 260:	ae 0f       	add	r26, r30
 262:	bf 2f       	mov	r27, r31
 264:	b1 1d       	adc	r27, r1
 266:	5d 96       	adiw	r26, 0x1d	; 29
 268:	8c 91       	ld	r24, X
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:187
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 26a:	92 8d       	ldd	r25, Z+26	; 0x1a
 26c:	9f 5f       	subi	r25, 0xFF	; 255
 26e:	9f 73       	andi	r25, 0x3F	; 63
 270:	92 8f       	std	Z+26, r25	; 0x1a
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:188
    return c;
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:184

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	9f ef       	ldi	r25, 0xFF	; 255
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:190
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 27a:	08 95       	ret

0000027c <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:172
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
 27c:	fc 01       	movw	r30, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:173
  if (_rx_buffer_head == _rx_buffer_tail) {
 27e:	91 8d       	ldd	r25, Z+25	; 0x19
 280:	82 8d       	ldd	r24, Z+26	; 0x1a
 282:	98 17       	cp	r25, r24
 284:	31 f0       	breq	.+12     	; 0x292 <HardwareSerial::peek()+0x16>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:176
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 286:	82 8d       	ldd	r24, Z+26	; 0x1a
 288:	e8 0f       	add	r30, r24
 28a:	f1 1d       	adc	r31, r1
 28c:	85 8d       	ldd	r24, Z+29	; 0x1d
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	08 95       	ret
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:174
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	9f ef       	ldi	r25, 0xFF	; 255
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:178
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 296:	08 95       	ret

00000298 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:167
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 298:	fc 01       	movw	r30, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:168
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 29a:	91 8d       	ldd	r25, Z+25	; 0x19
 29c:	22 8d       	ldd	r18, Z+26	; 0x1a
 29e:	89 2f       	mov	r24, r25
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	80 5c       	subi	r24, 0xC0	; 192
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	82 1b       	sub	r24, r18
 2a8:	91 09       	sbc	r25, r1
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:169
}
 2aa:	8f 73       	andi	r24, 0x3F	; 63
 2ac:	99 27       	eor	r25, r25
 2ae:	08 95       	ret

000002b0 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 2b0:	8b e1       	ldi	r24, 0x1B	; 27
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	0e 94 4c 01 	call	0x298	; 0x298 <HardwareSerial::available()>
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	89 2b       	or	r24, r25
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <Serial0_available()+0x10>
 2be:	20 e0       	ldi	r18, 0x00	; 0
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial0.cpp:77
}
 2c0:	82 2f       	mov	r24, r18
 2c2:	08 95       	ret

000002c4 <serialEventRun()>:
_Z14serialEventRunv():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	89 2b       	or	r24, r25
 2ca:	29 f0       	breq	.+10     	; 0x2d6 <serialEventRun()+0x12>
 2cc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Serial0_available()>
 2d0:	81 11       	cpse	r24, r1
 2d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
 2d6:	08 95       	ret

000002d8 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 2d8:	fc 01       	movw	r30, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 2da:	a4 8d       	ldd	r26, Z+28	; 0x1c
 2dc:	a8 0f       	add	r26, r24
 2de:	b9 2f       	mov	r27, r25
 2e0:	b1 1d       	adc	r27, r1
 2e2:	a3 5a       	subi	r26, 0xA3	; 163
 2e4:	bf 4f       	sbci	r27, 0xFF	; 255
 2e6:	2c 91       	ld	r18, X
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 2e8:	84 8d       	ldd	r24, Z+28	; 0x1c
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	8f 73       	andi	r24, 0x3F	; 63
 2f0:	99 27       	eor	r25, r25
 2f2:	84 8f       	std	Z+28, r24	; 0x1c
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:96

  *_udr = c;
 2f4:	a6 89       	ldd	r26, Z+22	; 0x16
 2f6:	b7 89       	ldd	r27, Z+23	; 0x17
 2f8:	2c 93       	st	X, r18
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 2fa:	a0 89       	ldd	r26, Z+16	; 0x10
 2fc:	b1 89       	ldd	r27, Z+17	; 0x11
 2fe:	8c 91       	ld	r24, X
 300:	83 70       	andi	r24, 0x03	; 3
 302:	80 64       	ori	r24, 0x40	; 64
 304:	8c 93       	st	X, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:109
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 306:	93 8d       	ldd	r25, Z+27	; 0x1b
 308:	84 8d       	ldd	r24, Z+28	; 0x1c
 30a:	98 13       	cpse	r25, r24
 30c:	06 c0       	rjmp	.+12     	; 0x31a <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 30e:	02 88       	ldd	r0, Z+18	; 0x12
 310:	f3 89       	ldd	r31, Z+19	; 0x13
 312:	e0 2d       	mov	r30, r0
 314:	80 81       	ld	r24, Z
 316:	8f 7d       	andi	r24, 0xDF	; 223
 318:	80 83       	st	Z, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:113
  }
}
 31a:	08 95       	ret

0000031c <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:226
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:227
  _written = true;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	88 8f       	std	Y+24, r24	; 0x18
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:232
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 32e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 330:	8c 8d       	ldd	r24, Y+28	; 0x1c
 332:	98 13       	cpse	r25, r24
 334:	1a c0       	rjmp	.+52     	; 0x36a <HardwareSerial::write(unsigned char)+0x4e>
 336:	e8 89       	ldd	r30, Y+16	; 0x10
 338:	f9 89       	ldd	r31, Y+17	; 0x11
 33a:	80 81       	ld	r24, Z
 33c:	85 ff       	sbrs	r24, 5
 33e:	15 c0       	rjmp	.+42     	; 0x36a <HardwareSerial::write(unsigned char)+0x4e>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:241
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 340:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\program files (x86)\arduino\hardware\tools\avr\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 342:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:242
      *_udr = c;
 344:	ee 89       	ldd	r30, Y+22	; 0x16
 346:	ff 89       	ldd	r31, Y+23	; 0x17
 348:	60 83       	st	Z, r22
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:244
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 34a:	e8 89       	ldd	r30, Y+16	; 0x10
 34c:	f9 89       	ldd	r31, Y+17	; 0x11
 34e:	80 81       	ld	r24, Z
 350:	83 70       	andi	r24, 0x03	; 3
 352:	80 64       	ori	r24, 0x40	; 64
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:275
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
 354:	80 83       	st	Z, r24
__iRestore():
c:\program files (x86)\arduino\hardware\tools\avr\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 356:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:279
  }
  
  return 1;
}
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	08 95       	ret
 36a:	f6 2e       	mov	r15, r22
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:251
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 36c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	0f 5f       	subi	r16, 0xFF	; 255
 372:	1f 4f       	sbci	r17, 0xFF	; 255
 374:	0f 73       	andi	r16, 0x3F	; 63
 376:	11 27       	eor	r17, r17
 378:	e0 2e       	mov	r14, r16
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:255
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 37a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 37c:	8e 11       	cpse	r24, r14
 37e:	0c c0       	rjmp	.+24     	; 0x398 <HardwareSerial::write(unsigned char)+0x7c>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:256
    if (bit_is_clear(SREG, SREG_I)) {
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	07 fc       	sbrc	r0, 7
 384:	fa cf       	rjmp	.-12     	; 0x37a <HardwareSerial::write(unsigned char)+0x5e>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:261
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 386:	e8 89       	ldd	r30, Y+16	; 0x10
 388:	f9 89       	ldd	r31, Y+17	; 0x11
 38a:	80 81       	ld	r24, Z
 38c:	85 ff       	sbrs	r24, 5
 38e:	f5 cf       	rjmp	.-22     	; 0x37a <HardwareSerial::write(unsigned char)+0x5e>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:262
	_tx_udr_empty_irq();
 390:	ce 01       	movw	r24, r28
 392:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <HardwareSerial::_tx_udr_empty_irq()>
 396:	f1 cf       	rjmp	.-30     	; 0x37a <HardwareSerial::write(unsigned char)+0x5e>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:268
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 398:	eb 8d       	ldd	r30, Y+27	; 0x1b
 39a:	ec 0f       	add	r30, r28
 39c:	fd 2f       	mov	r31, r29
 39e:	f1 1d       	adc	r31, r1
 3a0:	e3 5a       	subi	r30, 0xA3	; 163
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	f0 82       	st	Z, r15
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:273

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 3a6:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\program files (x86)\arduino\hardware\tools\avr\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3a8:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:274
    _tx_buffer_head = i;
 3aa:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:275
    sbi(*_ucsrb, UDRIE0);
 3ac:	ea 89       	ldd	r30, Y+18	; 0x12
 3ae:	fb 89       	ldd	r31, Y+19	; 0x13
 3b0:	80 81       	ld	r24, Z
 3b2:	80 62       	ori	r24, 0x20	; 32
 3b4:	cf cf       	rjmp	.-98     	; 0x354 <HardwareSerial::write(unsigned char)+0x38>

000003b6 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:206
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	ec 01       	movw	r28, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:210
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 3bc:	88 8d       	ldd	r24, Y+24	; 0x18
 3be:	88 23       	and	r24, r24
 3c0:	b9 f0       	breq	.+46     	; 0x3f0 <HardwareSerial::flush()+0x3a>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:213
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 3c2:	aa 89       	ldd	r26, Y+18	; 0x12
 3c4:	bb 89       	ldd	r27, Y+19	; 0x13
 3c6:	e8 89       	ldd	r30, Y+16	; 0x10
 3c8:	f9 89       	ldd	r31, Y+17	; 0x11
 3ca:	8c 91       	ld	r24, X
 3cc:	85 fd       	sbrc	r24, 5
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <HardwareSerial::flush()+0x20>
 3d0:	80 81       	ld	r24, Z
 3d2:	86 fd       	sbrc	r24, 6
 3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <HardwareSerial::flush()+0x3a>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:214
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	07 fc       	sbrc	r0, 7
 3da:	f7 cf       	rjmp	.-18     	; 0x3ca <HardwareSerial::flush()+0x14>
 3dc:	8c 91       	ld	r24, X
 3de:	85 ff       	sbrs	r24, 5
 3e0:	f2 cf       	rjmp	.-28     	; 0x3c6 <HardwareSerial::flush()+0x10>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:218
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 3e2:	80 81       	ld	r24, Z
 3e4:	85 ff       	sbrs	r24, 5
 3e6:	ed cf       	rjmp	.-38     	; 0x3c2 <HardwareSerial::flush()+0xc>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:219
	  _tx_udr_empty_irq();
 3e8:	ce 01       	movw	r24, r28
 3ea:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <HardwareSerial::_tx_udr_empty_irq()>
 3ee:	e9 cf       	rjmp	.-46     	; 0x3c2 <HardwareSerial::flush()+0xc>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:223
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <micros>:
micros():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:81
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 3f6:	3f b7       	in	r19, 0x3f	; 63
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:83
	
	cli();
 3f8:	f8 94       	cli
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:84
	m = timer0_overflow_count;
 3fa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <timer0_overflow_count>
 3fe:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <timer0_overflow_count+0x1>
 402:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <timer0_overflow_count+0x2>
 406:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <timer0_overflow_count+0x3>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:86
#if defined(TCNT0)
	t = TCNT0;
 40a:	26 b5       	in	r18, 0x26	; 38
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:94
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 40c:	a8 9b       	sbis	0x15, 0	; 21
 40e:	05 c0       	rjmp	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 410:	2f 3f       	cpi	r18, 0xFF	; 255
 412:	19 f0       	breq	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:95
		m++;
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	a1 1d       	adc	r26, r1
 418:	b1 1d       	adc	r27, r1
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:101
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 41a:	3f bf       	out	0x3f, r19	; 63
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:103
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 41c:	ba 2f       	mov	r27, r26
 41e:	a9 2f       	mov	r26, r25
 420:	98 2f       	mov	r25, r24
 422:	88 27       	eor	r24, r24
 424:	bc 01       	movw	r22, r24
 426:	cd 01       	movw	r24, r26
 428:	62 0f       	add	r22, r18
 42a:	71 1d       	adc	r23, r1
 42c:	81 1d       	adc	r24, r1
 42e:	91 1d       	adc	r25, r1
 430:	42 e0       	ldi	r20, 0x02	; 2
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	88 1f       	adc	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	4a 95       	dec	r20
 43c:	d1 f7       	brne	.-12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:104
}
 43e:	08 95       	ret

00000440 <delay.constprop.4>:
delay.constprop.4():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:106

void delay(unsigned long ms)
 440:	8f 92       	push	r8
 442:	9f 92       	push	r9
 444:	af 92       	push	r10
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:108
{
	uint32_t start = micros();
 450:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <micros>
 454:	4b 01       	movw	r8, r22
 456:	5c 01       	movw	r10, r24
 458:	84 ef       	ldi	r24, 0xF4	; 244
 45a:	c8 2e       	mov	r12, r24
 45c:	dd 24       	eor	r13, r13
 45e:	d3 94       	inc	r13
 460:	e1 2c       	mov	r14, r1
 462:	f1 2c       	mov	r15, r1
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:112

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 464:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <micros>
 468:	68 19       	sub	r22, r8
 46a:	79 09       	sbc	r23, r9
 46c:	8a 09       	sbc	r24, r10
 46e:	9b 09       	sbc	r25, r11
 470:	68 3e       	cpi	r22, 0xE8	; 232
 472:	73 40       	sbci	r23, 0x03	; 3
 474:	81 05       	cpc	r24, r1
 476:	91 05       	cpc	r25, r1
 478:	a8 f3       	brcs	.-22     	; 0x464 <delay.constprop.4+0x24>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:113
			ms--;
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	c2 1a       	sub	r12, r18
 47e:	d1 08       	sbc	r13, r1
 480:	e1 08       	sbc	r14, r1
 482:	f1 08       	sbc	r15, r1
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:114
			start += 1000;
 484:	88 ee       	ldi	r24, 0xE8	; 232
 486:	88 0e       	add	r8, r24
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	98 1e       	adc	r9, r24
 48c:	a1 1c       	adc	r10, r1
 48e:	b1 1c       	adc	r11, r1
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:112
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 490:	c1 14       	cp	r12, r1
 492:	d1 04       	cpc	r13, r1
 494:	e1 04       	cpc	r14, r1
 496:	f1 04       	cpc	r15, r1
 498:	29 f7       	brne	.-54     	; 0x464 <delay.constprop.4+0x24>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:117
			ms--;
			start += 1000;
		}
	}
}
 49a:	ff 90       	pop	r15
 49c:	ef 90       	pop	r14
 49e:	df 90       	pop	r13
 4a0:	cf 90       	pop	r12
 4a2:	bf 90       	pop	r11
 4a4:	af 90       	pop	r10
 4a6:	9f 90       	pop	r9
 4a8:	8f 90       	pop	r8
 4aa:	08 95       	ret

000004ac <__vector_19>:
__vector_19():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
 4ce:	8b e1       	ldi	r24, 0x1B	; 27
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <HardwareSerial::_tx_udr_empty_irq()>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial0.cpp:65
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_18>:
__vector_18():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	8f 93       	push	r24
 506:	9f 93       	push	r25
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
_rx_complete_irq():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 50c:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <Serial+0x10>
 510:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <Serial+0x11>
 514:	80 81       	ld	r24, Z
 516:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <Serial+0x16>
 51a:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <Serial+0x17>
 51e:	82 fd       	sbrc	r24, 2
 520:	1b c0       	rjmp	.+54     	; 0x558 <__vector_18+0x60>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 522:	90 81       	ld	r25, Z
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 524:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Serial+0x19>
 528:	8f 5f       	subi	r24, 0xFF	; 255
 52a:	8f 73       	andi	r24, 0x3F	; 63
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 52c:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <Serial+0x1a>
 530:	82 17       	cp	r24, r18
 532:	41 f0       	breq	.+16     	; 0x544 <__vector_18+0x4c>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
 534:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <Serial+0x19>
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	e5 5e       	subi	r30, 0xE5	; 229
 53c:	fe 4f       	sbci	r31, 0xFE	; 254
 53e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial_private.h:115
      _rx_buffer_head = i;
 540:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <Serial+0x19>
__vector_18():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	2f 91       	pop	r18
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti
_rx_complete_irq():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 558:	80 81       	ld	r24, Z
 55a:	f4 cf       	rjmp	.-24     	; 0x544 <__vector_18+0x4c>

0000055c <__vector_16>:
__vector_16():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:47
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	0f 92       	push	r0
 564:	11 24       	eor	r1, r1
 566:	2f 93       	push	r18
 568:	3f 93       	push	r19
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
 56e:	af 93       	push	r26
 570:	bf 93       	push	r27
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:50
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 572:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <timer0_millis>
 576:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <timer0_millis+0x1>
 57a:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <timer0_millis+0x2>
 57e:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <timer0_millis+0x3>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:51
	unsigned char f = timer0_fract;
 582:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <__data_end>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:54

	m += MILLIS_INC;
	f += FRACT_INC;
 586:	23 e0       	ldi	r18, 0x03	; 3
 588:	23 0f       	add	r18, r19
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:55
	if (f >= FRACT_MAX) {
 58a:	2d 37       	cpi	r18, 0x7D	; 125
 58c:	58 f5       	brcc	.+86     	; 0x5e4 <__vector_16+0x88>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:53
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	a1 1d       	adc	r26, r1
 592:	b1 1d       	adc	r27, r1
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:60
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 594:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <__data_end>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:61
	timer0_millis = m;
 598:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <timer0_millis>
 59c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <timer0_millis+0x1>
 5a0:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <timer0_millis+0x2>
 5a4:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <timer0_millis+0x3>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:62
	timer0_overflow_count++;
 5a8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <timer0_overflow_count>
 5ac:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <timer0_overflow_count+0x1>
 5b0:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <timer0_overflow_count+0x2>
 5b4:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <timer0_overflow_count+0x3>
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	a1 1d       	adc	r26, r1
 5bc:	b1 1d       	adc	r27, r1
 5be:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <timer0_overflow_count>
 5c2:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <timer0_overflow_count+0x1>
 5c6:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <timer0_overflow_count+0x2>
 5ca:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <timer0_overflow_count+0x3>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:63
}
 5ce:	bf 91       	pop	r27
 5d0:	af 91       	pop	r26
 5d2:	9f 91       	pop	r25
 5d4:	8f 91       	pop	r24
 5d6:	3f 91       	pop	r19
 5d8:	2f 91       	pop	r18
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:56
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 5e4:	26 e8       	ldi	r18, 0x86	; 134
 5e6:	23 0f       	add	r18, r19
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:57
		m += 1;
 5e8:	02 96       	adiw	r24, 0x02	; 2
 5ea:	a1 1d       	adc	r26, r1
 5ec:	b1 1d       	adc	r27, r1
 5ee:	d2 cf       	rjmp	.-92     	; 0x594 <__vector_16+0x38>

000005f0 <main>:
main():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:245

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 5f0:	78 94       	sei
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:251
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 5f2:	84 b5       	in	r24, 0x24	; 36
 5f4:	82 60       	ori	r24, 0x02	; 2
 5f6:	84 bd       	out	0x24, r24	; 36
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:252
	sbi(TCCR0A, WGM00);
 5f8:	84 b5       	in	r24, 0x24	; 36
 5fa:	81 60       	ori	r24, 0x01	; 1
 5fc:	84 bd       	out	0x24, r24	; 36
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:265
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 5fe:	85 b5       	in	r24, 0x25	; 37
 600:	82 60       	ori	r24, 0x02	; 2
 602:	85 bd       	out	0x25, r24	; 37
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:266
	sbi(TCCR0B, CS00);
 604:	85 b5       	in	r24, 0x25	; 37
 606:	81 60       	ori	r24, 0x01	; 1
 608:	85 bd       	out	0x25, r24	; 37
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:279

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 60a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 60e:	81 60       	ori	r24, 0x01	; 1
 610:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:290
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 614:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:293

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 618:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 61c:	82 60       	ori	r24, 0x02	; 2
 61e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:295
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 622:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 626:	81 60       	ori	r24, 0x01	; 1
 628:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:305
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 62c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 630:	81 60       	ori	r24, 0x01	; 1
 632:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:312

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 636:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 63a:	84 60       	ori	r24, 0x04	; 4
 63c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:321

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 640:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 644:	81 60       	ori	r24, 0x01	; 1
 646:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:356
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 64a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 64e:	84 60       	ori	r24, 0x04	; 4
 650:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:357
		sbi(ADCSRA, ADPS1);
 654:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 658:	82 60       	ori	r24, 0x02	; 2
 65a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:358
		sbi(ADCSRA, ADPS0);
 65e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 662:	81 60       	ori	r24, 0x01	; 1
 664:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:381
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 668:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 66c:	80 68       	ori	r24, 0x80	; 128
 66e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/wiring.c:390
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 672:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
begin():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 676:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <Serial+0x10>
 67a:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <Serial+0x11>
 67e:	82 e0       	ldi	r24, 0x02	; 2
 680:	80 83       	st	Z, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 682:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <Serial+0xc>
 686:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <Serial+0xd>
 68a:	10 82       	st	Z, r1
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
 68c:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <Serial+0xe>
 690:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <Serial+0xf>
 694:	8f ec       	ldi	r24, 0xCF	; 207
 696:	80 83       	st	Z, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:138

  _written = false;
 698:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Serial+0x18>
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 69c:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <Serial+0x14>
 6a0:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <Serial+0x15>
 6a4:	86 e0       	ldi	r24, 0x06	; 6
 6a6:	80 83       	st	Z, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:146
  
  sbi(*_ucsrb, RXEN0);
 6a8:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <Serial+0x12>
 6ac:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <Serial+0x13>
 6b0:	80 81       	ld	r24, Z
 6b2:	80 61       	ori	r24, 0x10	; 16
 6b4:	80 83       	st	Z, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:147
  sbi(*_ucsrb, TXEN0);
 6b6:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <Serial+0x12>
 6ba:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <Serial+0x13>
 6be:	80 81       	ld	r24, Z
 6c0:	88 60       	ori	r24, 0x08	; 8
 6c2:	80 83       	st	Z, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:148
  sbi(*_ucsrb, RXCIE0);
 6c4:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <Serial+0x12>
 6c8:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <Serial+0x13>
 6cc:	80 81       	ld	r24, Z
 6ce:	80 68       	ori	r24, 0x80	; 128
 6d0:	80 83       	st	Z, r24
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:149
  cbi(*_ucsrb, UDRIE0);
 6d2:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <Serial+0x12>
 6d6:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <Serial+0x13>
 6da:	80 81       	ld	r24, Z
 6dc:	8f 7d       	andi	r24, 0xDF	; 223
 6de:	80 83       	st	Z, r24
setup():
G:\freeRTOS\11_event_groups\event_group_3_tasks/event_group_3_tasks.ino:16
void setup()
{
  // put your setup code here, to run once:
  Serial.begin(9600);

  pinMode(RED, OUTPUT);
 6e0:	86 e0       	ldi	r24, 0x06	; 6
 6e2:	0e 94 87 00 	call	0x10e	; 0x10e <pinMode.constprop.5>
G:\freeRTOS\11_event_groups\event_group_3_tasks/event_group_3_tasks.ino:17
  pinMode(YELLOW, OUTPUT);
 6e6:	87 e0       	ldi	r24, 0x07	; 7
 6e8:	0e 94 87 00 	call	0x10e	; 0x10e <pinMode.constprop.5>
G:\freeRTOS\11_event_groups\event_group_3_tasks/event_group_3_tasks.ino:18
  pinMode(BLUE, OUTPUT);
 6ec:	88 e0       	ldi	r24, 0x08	; 8
 6ee:	0e 94 87 00 	call	0x10e	; 0x10e <pinMode.constprop.5>
serialEventRun():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 6f2:	c0 e0       	ldi	r28, 0x00	; 0
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
loop():
G:\freeRTOS\11_event_groups\event_group_3_tasks/event_group_3_tasks.ino:24
}

void loop()
{
  // put your main code here, to run repeatedly:
  digitalWrite(BLUE, HIGH);
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	0e 94 a6 00 	call	0x14c	; 0x14c <digitalWrite.constprop.3>
G:\freeRTOS\11_event_groups\event_group_3_tasks/event_group_3_tasks.ino:25
  delay(500);
 6fc:	0e 94 20 02 	call	0x440	; 0x440 <delay.constprop.4>
G:\freeRTOS\11_event_groups\event_group_3_tasks/event_group_3_tasks.ino:26
  digitalWrite(BLUE, LOW);
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	0e 94 a6 00 	call	0x14c	; 0x14c <digitalWrite.constprop.3>
G:\freeRTOS\11_event_groups\event_group_3_tasks/event_group_3_tasks.ino:27
  delay(500);
 706:	0e 94 20 02 	call	0x440	; 0x440 <delay.constprop.4>
serialEventRun():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial.cpp:67
 70a:	20 97       	sbiw	r28, 0x00	; 0
 70c:	a1 f3       	breq	.-24     	; 0x6f6 <main+0x106>
 70e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Serial0_available()>
 712:	88 23       	and	r24, r24
 714:	81 f3       	breq	.-32     	; 0x6f6 <main+0x106>
 716:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 71a:	ed cf       	rjmp	.-38     	; 0x6f6 <main+0x106>

0000071c <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC2Ev():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 71c:	eb e1       	ldi	r30, 0x1B	; 27
 71e:	f1 e0       	ldi	r31, 0x01	; 1
 720:	13 82       	std	Z+3, r1	; 0x03
 722:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC2Ev():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 724:	88 ee       	ldi	r24, 0xE8	; 232
 726:	93 e0       	ldi	r25, 0x03	; 3
 728:	a0 e0       	ldi	r26, 0x00	; 0
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	84 83       	std	Z+4, r24	; 0x04
 72e:	95 83       	std	Z+5, r25	; 0x05
 730:	a6 83       	std	Z+6, r26	; 0x06
 732:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC2EPVhS1_S1_S1_S1_S1_():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 734:	84 e0       	ldi	r24, 0x04	; 4
 736:	91 e0       	ldi	r25, 0x01	; 1
 738:	91 83       	std	Z+1, r25	; 0x01
 73a:	80 83       	st	Z, r24
 73c:	85 ec       	ldi	r24, 0xC5	; 197
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	95 87       	std	Z+13, r25	; 0x0d
 742:	84 87       	std	Z+12, r24	; 0x0c
 744:	84 ec       	ldi	r24, 0xC4	; 196
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	97 87       	std	Z+15, r25	; 0x0f
 74a:	86 87       	std	Z+14, r24	; 0x0e
 74c:	80 ec       	ldi	r24, 0xC0	; 192
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	91 8b       	std	Z+17, r25	; 0x11
 752:	80 8b       	std	Z+16, r24	; 0x10
 754:	81 ec       	ldi	r24, 0xC1	; 193
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	93 8b       	std	Z+19, r25	; 0x13
 75a:	82 8b       	std	Z+18, r24	; 0x12
 75c:	82 ec       	ldi	r24, 0xC2	; 194
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	95 8b       	std	Z+21, r25	; 0x15
 762:	84 8b       	std	Z+20, r24	; 0x14
 764:	86 ec       	ldi	r24, 0xC6	; 198
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	97 8b       	std	Z+23, r25	; 0x17
 76a:	86 8b       	std	Z+22, r24	; 0x16
 76c:	11 8e       	std	Z+25, r1	; 0x19
 76e:	12 8e       	std	Z+26, r1	; 0x1a
 770:	13 8e       	std	Z+27, r1	; 0x1b
 772:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino/HardwareSerial0.cpp:77

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
 774:	08 95       	ret

00000776 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 776:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 778:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 77a:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 77c:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 77e:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 780:	09 94       	ijmp

00000782 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 782:	f8 94       	cli

00000784 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
